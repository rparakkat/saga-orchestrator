public abstract class RetryHandler {
    protected RetryHandler nextHandler;

    public void setNext(RetryHandler handler) {
        this.nextHandler = handler;
    }

    public abstract boolean handle(HttpCommand command, int attempt, Exception lastException);
}

@Component
public class ExponentialBackoffRetryHandler extends RetryHandler {
    @Override
    public boolean handle(HttpCommand command, int attempt, Exception lastException) {
        if (attempt <= command.getRetryPolicy().getMaxRetries()) {
            long delay = calculateExponentialBackoff(attempt, command.getRetryPolicy().getRetryDelayMs());
            try {
                Thread.sleep(delay);
                return true; // Retry
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                return false;
            }
        }
        return nextHandler != null ? nextHandler.handle(command, attempt, lastException) : false;
    }

    private long calculateExponentialBackoff(int attempt, long baseDelay) {
        return (long) (baseDelay * Math.pow(2, attempt - 1));
    }
}